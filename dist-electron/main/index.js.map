{"version":3,"file":"index.js","sources":["../../electron/main/index.ts"],"sourcesContent":["import { app, BrowserWindow, shell, ipcMain, dialog } from 'electron';\nimport { release } from 'node:os';\nimport { join } from 'node:path';\nimport { exec } from 'child_process';\nimport path from 'path';\nimport fs from 'fs';\nimport os from 'os';\n\n// The built directory structure\n//\n// ├─┬ dist-electron\n// │ ├─┬ main\n// │ │ └── index.js    > Electron-Main\n// │ └─┬ preload\n// │   └── index.js    > Preload-Scripts\n// ├─┬ dist\n// │ └── index.html    > Electron-Renderer\n//\nprocess.env.DIST_ELECTRON = join(__dirname, '..');\nprocess.env.DIST = join(process.env.DIST_ELECTRON, '../dist');\nprocess.env.PUBLIC = process.env.VITE_DEV_SERVER_URL\n  ? join(process.env.DIST_ELECTRON, '../public')\n  : process.env.DIST;\n\n// 定义日志文件路径\nconst logFilePath = path.join(os.homedir(), '.local', 'share', 'dummy-patch-editor', 'electron-debug.log');\nif(!fs.existsSync(path.dirname(logFilePath))) {\n  fs.mkdirSync(path.dirname(logFilePath), { recursive: true });\n}\n\n// 定义一个简单的日志函数\nfunction logToFile(message) {\n  fs.appendFileSync(logFilePath, `${new Date().toISOString()} - ${message}\\n`);\n}\n\n// Disable GPU Acceleration for Windows 7\nif (release().startsWith('6.1')) app.disableHardwareAcceleration();\n\n// Set application name for Windows 10+ notifications\nif (process.platform === 'win32') app.setAppUserModelId(app.getName());\n\nif (!app.requestSingleInstanceLock()) {\n  app.quit();\n  process.exit(0);\n}\n\n// Remove electron security warnings\n// This warning only shows in development mode\n// Read more on https://www.electronjs.org/docs/latest/tutorial/security\n// process.env['ELECTRON_DISABLE_SECURITY_WARNINGS'] = 'true'\n\nlet win: BrowserWindow | null = null;\n// Here, you can also use other preload\nconst preload = join(__dirname, '../preload/index.js');\nconst url = process.env.VITE_DEV_SERVER_URL;\nconst indexHtml = join(process.env.DIST, 'index.html');\n\nasync function createWindow() {\n  win = new BrowserWindow({\n    title: 'Main window',\n    icon: join(process.env.PUBLIC, 'favicon.ico'),\n    webPreferences: {\n      preload,\n      // Warning: Enable nodeIntegration and disable contextIsolation is not secure in production\n      // Consider using contextBridge.exposeInMainWorld\n      // Read more on https://www.electronjs.org/docs/latest/tutorial/context-isolation\n      nodeIntegration: false,\n      contextIsolation: true,\n    },\n    width: 1120,\n    height: 680,\n  });\n\n  if (process.env.VITE_DEV_SERVER_URL) {\n    // electron-vite-vue#298\n    win.loadURL(url);\n    // Open devTool if the app is not packaged\n    win.webContents.openDevTools();\n  } else {\n    win.loadFile(indexHtml);\n  }\n\n  // Test actively push message to the Electron-Renderer\n  win.webContents.on('did-finish-load', () => {\n    win?.webContents.send('main-process-message', new Date().toLocaleString());\n  });\n\n  // Make all links open with the browser, not with the application\n  win.webContents.setWindowOpenHandler(({ url }) => {\n    if (url.startsWith('https:')) shell.openExternal(url);\n    return { action: 'deny' };\n  });\n}\n\napp.whenReady().then(createWindow);\n\napp.on('window-all-closed', () => {\n  win = null;\n  if (process.platform !== 'darwin') app.quit();\n});\n\napp.on('second-instance', () => {\n  if (win) {\n    // Focus on the main window if the user tried to open another\n    if (win.isMinimized()) win.restore();\n    win.focus();\n  }\n});\n\napp.on('activate', () => {\n  const allWindows = BrowserWindow.getAllWindows();\n  if (allWindows.length) {\n    allWindows[0].focus();\n  } else {\n    createWindow();\n  }\n});\n\n// New window example arg: new windows url\nipcMain.handle('open-win', (_, arg) => {\n  const childWindow = new BrowserWindow({\n    webPreferences: {\n      preload,\n      nodeIntegration: false,\n      contextIsolation: true,\n    },\n  });\n\n  if (process.env.VITE_DEV_SERVER_URL) {\n    childWindow.loadURL(`${url}#${arg}`);\n  } else {\n    childWindow.loadFile(indexHtml, { hash: arg });\n  }\n});\n\nipcMain.handle('select-directory', async () => {\n  const result = await dialog.showOpenDialog({\n    properties: ['openDirectory'],\n  });\n  if (!result.canceled && result.filePaths.length > 0) {\n    return { success: true, directory: result.filePaths[0] };\n  }\n  return {\n    success: false,\n    error: 'Directory selection was canceled or no directory was selected.',\n  };\n});\n\nipcMain.on('load-conflict-sources', (event, repoPath) => {\n  logToFile(`Received repoPath: ${repoPath}`);\n  // 检查路径是否存在\n  if (!fs.existsSync(repoPath)) {\n    event.reply(\n      'load-conflict-sources-error',\n      'Provided repository path does not exist.'\n    );\n    return;\n  }\n\n  // 检查路径是否是一个目录\n  if (!fs.statSync(repoPath).isDirectory()) {\n    event.reply(\n      'load-conflict-sources-error',\n      'Provided path is not a directory.'\n    );\n    return;\n  }\n\n  // 检查 .git 目录是否存在\n  const gitDir = path.join(repoPath, '.git');\n  if (!fs.existsSync(gitDir) || !fs.statSync(gitDir).isDirectory()) {\n    event.reply(\n      'load-conflict-sources-error',\n      'Provided path does not seem to be a valid git repository.'\n    );\n    return;\n  }\n\n  logToFile(`gitDir: ${gitDir}`);\n\n  // 执行 git 命令\n  exec(\n    'git diff --name-only --diff-filter=U',\n    { cwd: repoPath },\n    (error, stdout, stderr) => {\n      if (error) {\n        logToFile(\n          `Error executing git command: ${stderr || 'Unknown error occurred.'}`\n        );\n        event.reply(\n          'load-conflict-sources-error',\n          stderr || 'Unknown error occurred.'\n        );\n        return;\n      }\n      const files = stdout.split('\\n').filter((file) => file.trim() !== '');\n      logToFile(`Found files: ${files.join(', ')}`);\n      event.reply('load-conflict-sources-success', files);\n    }\n  );\n});\n\nipcMain.handle('join-path', (event, ...paths) => {\n  return path.join(...paths);\n});\n\nipcMain.handle('read-file', (event, filePath) => {\n  return new Promise((resolve, reject) => {\n    fs.readFile(filePath, 'utf-8', (error, data) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(data.split('\\n'));\n      }\n    });\n  });\n});\n"],"names":["join","release","app","BrowserWindow","url","shell","ipcMain","dialog","exec"],"mappings":"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"}